# This file contains functions used for: navigating between folders, tracking history of navigated folders, adding dirs to favorites menu, etc.
scriptDir=~; #get script directory in order to build the paths of the supporting files
prevDir=`pwd`; #this variable is used by the function that jumps to previous directory (default is the current directory from which the script launches)
input_storage_file=$scriptDir/.store_input; # temporary solution for getting the user input from the python scripts connected to .functions_goto
output_storage_file=$scriptDir/.store_output; # temporary solution for getting the python script output connected to .functions_goto
forwardUserInput=false; #variable used in navigation mode to determine if the user input received by a called function should be processed after function exits
pythonPath='/usr/bin/python3'

# initialize the environment, ensure the navigation and command history menus are sorted/consolidated
"$pythonPath" "$scriptDir"/init.py

# This function is used to enter the directory navigation console (no cd required but only the dir name including wildcards; for commands use ':')
function navigate {
    # stores last executed shell command (if any) and its result
    prevCommand='';
    commandResult='';
    clear;
    echo 'Welcome to navigation mode!';
    while [[ '1' == '1' ]]; do
	if [[ $navigationInput != "?" ]]; then
	    if [[ -z $prevCommand ]]; then
		"$pythonPath" "$scriptDir"/display_general_navigation_output.py;
	    else
		"$pythonPath" "$scriptDir"/display_general_navigation_output.py "$prevCommand" "$commandResult";
	    fi
	fi
	read -e navigationInput;
	# stay in this loop as long as the function called by choosing a navigation option forwards user input back to the navigate function
	while [[ '1' == '1' ]]; do
	    clear;
	    "$pythonPath" "$scriptDir"/handle_navigation_option.py "$navigationInput" "$prevDir" "$prevCommand";
	    result=$?;
	    if [[ $result == 1 ]]; then
		navigationInput=`head -1 $input_storage_file`;
		forwardUserInput=true;
	    elif [[ $result == 2 ]]; then
		if [[ $? == 0 ]]; then
		    prevCommand=`head -1 $input_storage_file`;
		    commandResult=`head -1 $output_storage_file`;
		fi
	    elif [[ $result == 4 ]]; then
		prevDir=`head -1 $output_storage_file`;
		cd "`head -1 $input_storage_file`";
	    fi

	    if [[ $forwardUserInput == true ]]; then
		forwardUserInput=false;
	    else
		break;
	    fi
	done
	if [[ $navigationInput == '!' ]]; then
	    return 0;
	fi
    done
}
